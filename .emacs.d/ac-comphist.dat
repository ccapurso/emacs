((("laser" .
   [3 0 0 1 0])
  ("last" .
   [0 0 0 2])
  ("cider-repl" .
   [1 0 0 0 0 0 0 0 0 0])
  ("cider-inspector" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("with-chicken*" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("69" .
   [1 0])
  ("body" .
   [2 0 0 0])
  ("tuna" .
   [1 0 0 0])
  ("defmacro" .
   [2 0 0 0 0 0 0 0])
  ("get-chicken" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("overtone-playground.utils/chicken" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("java.math.BigDecimal" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("java.math.BitSieve" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("256" .
   [2 0 0])
  ("range" .
   [3 0 0 0 0])
  ("seq" .
   [1 0 0])
  ("15" .
   [2 0])
  ("*1" .
   [1 0])
  ("clojure-version" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("all-rule-pairs" .
   [0 0 0 0 1 2 0 0 0 0 0 0 0 0])
  ("accum" .
   [2 0 0 0 0])
  ("reduce" .
   [3 0 0 0 0 0])
  ("for" .
   [4 0 0])
  ("src" .
   [10 0 0])
  ("16" .
   [9 0])
  ("dec" .
   [1 0 0])
  ("dc" .
   [1 0])
  ("21" .
   [1 0])
  ("==" .
   [1 0])
  ("fact" .
   [3 0 0 0])
  ("defn-" .
   [1 0 0 0 0])
  ("count" .
   [5 0 0 0 0])
  ("check-cycle-lengths" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("Commen" .
   [1 0 0 0 0 0])
  ("reset!" .
   [1 0 0 0 0 0])
  ("*chicken*" .
   [1 0 0 0 1 0 0 0 0])
  (".toString" .
   [1 0 0 0 0 0 0 0 0])
  ("clojure.data.json" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("json/write-str" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("java.io.StringWriter" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("java.io.StringReader" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("java.io" .
   [1 0 0 0 0 0 0])
  ("*print-dup*" .
   [0 0 0 0 0 0 0 0 0 0 1])
  ("bridge-out" .
   [0 0 0 0 0 1 0 0 0 0])
  ("true?" .
   [0 0 0 1 1])
  ("*print-readably*" .
   [0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0])
  ("binding" .
   [3 0 0 0 1 0 0])
  ("newline" .
   [1 0 0 0 0 0 0])
  ("space" .
   [4 0 0 0 0])
  ("char-escape-string" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("char?" .
   [0 0 0 0 1])
  ("partition" .
   [2 0 0 0 0 0 0 0 0])
  (":c" .
   [1 0])
  ("interleave" .
   [0 0 0 0 0 1 1 0 0 0])
  ("meta-data" .
   [0 0 0 0 0 0 0 1 0])
  (":shape" .
   [1 0 0 0 0 0])
  ("arg-spec" .
   [1 0 0 0 0 0 1 0])
  ("arg-sig" .
   [0 0 0 0 0 1 1])
  (":size" .
   [2 0 0 0 0])
  ("some-fn" .
   [1 0 0 0 0 1 0])
  (":some-value" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("assoc-fn" .
   [2 0 0 0 0 0 0 1])
  ("partial" .
   [1 0 0 0 0 0 0])
  ("let" .
   [6 0 0])
  (":some-key" .
   [2 0 0 0 0 0 0 0 0])
  ("->" .
   [2 0])
  (":b" .
   [2 0])
  (":a" .
   [2 0])
  ("curry-n" .
   [3 0 0 0 0 0 0])
  ("some-arg" .
   [1 0 0 0 0 0 0 0])
  ("drop" .
   [2 0 0 0])
  ("some" .
   [3 0 0 0])
  ("assoc" .
   [5 0 0 0 0])
  ("curry-last" .
   [0 0 0 0 1 0 0 0 0 0])
  ("last-arg" .
   [0 0 0 0 0 0 0 1])
  ("concat" .
   [3 0 0 0 0 0])
  ("apply" .
   [1 0 0 0 0])
  ("fn-name" .
   [1 0 0 0 0 0 0])
  ("fn" .
   [5 0])
  ("areduce" .
   [0 0 1 0 0 0 0])
  ("Class" .
   [1 0 0 0 0])
  ("arg" .
   [8 0 0])
  ("args" .
   [5 0 0 1])
  ("map" .
   [8 0 0])
  ("String" .
   [1 0 0 0 0 0])
  ("urine" .
   [1 0 0 0 0])
  ("6" .
   [1])
  ("burger" .
   [1 0 1 0 1 0])
  ("phone" .
   [1 0 0 0 0])
  ("macroexpand" .
   [0 0 0 0 0 0 0 0 0 0 2])
  ("java.lang.String" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("java.lang.Short" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0])
  ("meta" .
   [6 0 0 0])
  ("find-or-create-phone" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0])
  ("make-canonicalized-phone" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("disabled?" .
   [0 0 0 0 0 1 0 0 0])
  ("*ns*" .
   [0 0 0 3])
  ("string->sha1" .
   [0 0 0 0 0 0 0 1 1 0 0 0])
  ("str" .
   [1 0 0])
  ("default-phone-usage-rights" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("CanonicalizedPhone" .
   [0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("string/triml" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("string/trim" .
   [0 0 0 0 0 0 0 0 1 0 0])
  ("trim" .
   [1 0 0 0])
  ("vec" .
   [5 0 0])
  ("first" .
   [2 0 0 0 0])
  ("chicken.text" .
   [1 0 0 0 0 0 0 0 0 0 0 0])
  ("generate-control-file" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("read-properties" .
   [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("comes" .
   [0 0 0 0 1])
  ("Compiler" .
   [0 0 1 0 0 0 0 0])
  ("io" .
   [4 0])
  ("out" .
   [1 0 0])
  ("streams/writer" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("clojure.java.io" .
   [4 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("register-pool" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("wol_chicken.lang" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("clojure.contrib.classpath" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("clojure.core" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("require" .
   [6 0 0 0 0 0 0])
  ("wol-chicken.lang" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("chicken" .
   [6 0 0 0 0 0 1])
  ("println" .
   [4 0 0 0 0 0 0])
  ("defn" .
   [5 0 0 0])
  ("wol-chicken.core" .
   [0 0 0 0 2 0 0 0 0 0 0 1 0 0 0 0])
  ("ns" .
   [2 0])
  ("*rosetta-audio-format*" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  (".matches" .
   [1 0 0 0 0 0 0 0])
  ("AudioSystem/getAudioInputStream" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  (".getFormat" .
   [1 0 0 0 0 0 0 0 0 0])
  (":audio-file" .
   [1 0 0 0 0 0 0 0 0 0 0])
  (".charAt" .
   [0 0 0 0 0 1 0])
  ("mod" .
   [2 0 0])
  (".length" .
   [2 0 0 0 0 0 0])
  ("clojure.string" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("clojure.string/replace" .
   [2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("clojure.string/trim-newline" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("AudioDevice" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("a" .
   [1])
  ("440" .
   [1 0 0])
  ("noteOn" .
   [1 0 0 0 0 0])
  ("if" .
   [1 0])
  ("payload" .
   [1 0 0 0 0 0 0])
  ("s" .
   [1])
  ("A" .
   [1])
  ("audioDevice" .
   [4 0 0 0 0 0 0 0 0 0 0])
  ("append" .
   [1 0 0 0 0 0])
  ("sample" .
   [1 0 0 0 0 0])
  ("null" .
   [1 0 0 0])
  ("n" .
   [1])
  ("sampler" .
   [7 0 0 0 0 0 0])
  ("audioLib" .
   [2 0 0 0 0 0 0 0])
  ("channelCount" .
   [2 0 0 0 0 0 0 0 0 0 0 0])
  ("buffer" .
   [2 0 0 0 0 0])
  ("self" .
   [12 0 0 0])
  ("Base64/encodeBase64String" .
   [0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("audio/*drums*" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("nth" .
   [1 0 0])
  ("audio/mine-audio-data" .
   [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0])
  ("120" .
   [1 0 0])
  ("*sequence*" .
   [0 0 0 0 1 0 0 0 0 0])
  ("*swank*" .
   [0 0 1 0 0 0 0])
  ("new-tempo" .
   [1 0 0 0 0 0 0 0 1])
  (".setTempoInBPM" .
   [0 0 0 0 0 0 0 1 0 1 0 0 0 0])
  ("int" .
   [1 0 0])
  ("sequencer/*sequencer*" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("comment" .
   [11 0 1 0 1 1 1])
  (":bpm" .
   [1 0 0 0])
  (":payload" .
   [1 0 0 0 0 0 0 0])
  (":command" .
   [1 0 0 0 0 0 0 0])
  ("json/json-str" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("transmit-tempo-to-client" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("ws-respond" .
   [2 0 0 4 3 0 0 0 0 0])
  ("response" .
   [2 0 0 0 0 0 0 0])
  ("ws" .
   [1 0])
  ("doseq" .
   [5 0 1 0 0])
  ("ws-broadcast-others" .
   [2 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0])
  ("ws-broadcast-all" .
   [0 0 1 0 0 1 4 0 0 0 0 0 0 0 0 0])
  ("*web-socket*" .
   [2 0 0 1 1 0 0 0 0 1 0 1])
  ("*web-sockets*" .
   [3 0 0 0 0 0 0 1 0 0 0 0 0])
  ("atom" .
   [1 0 0 0])
  ("conj" .
   [7 0 0 0])
  ("swap!" .
   [1 0 0 0 0])
  ("*channel*" .
   [0 0 0 0 0 1 0 1 0])
  ("parsed-msg" .
   [0 0 0 0 0 0 0 1 1 0])
  ("json/read-json" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("parse" .
   [1 0 0 0 0])
  ("*web-socket-list*" .
   [0 0 0 4 1 2 0 0 0 0 0 1 0 0 0 0 0])
  ("wsocket-receive" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("data" .
   [2 0 0 0])
  ("r" .
   [1])
  ("console" .
   [1 0 0 0 0 0 0])
  ("defonce" .
   [2 0 0 0 0 0 0])
  ("format" .
   [3 0 0 0 0 0])
  ("msg" .
   [9 0 0])
  ("shutdown-server" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0])
  ("shutdown-agents" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("*server*" .
   [1 0 0 0 0 0 0 1])
  ("start-server" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  ("clj-etl-utils.log" .
   [1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("log/infof" .
   [28 0 0 0 0 0 0 0 0])
  ("log" .
   [3 0 0])
  (":as" .
   [2 0 0])
  ("clj-etl-utils.lang-utils" .
   [0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("post-ws-handshake" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("11" .
   [2 0])
  ("set!" .
   [2 0 0 0])
  ("size-or-seq" .
   [0 0 0 0 0 0 0 0 0 0 1])
  ("This" .
   [0 0 0 1])
  ("full-buffer?" .
   [0 0 0 0 0 0 0 1 0 0 0 0])
  ("empty-buffer?" .
   [0 0 0 0 0 0 1 0 0 0 0 0 0])
  (":volatile-mutable" .
   [0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0])
  ("write-count" .
   [2 0 0 0 0 0 0 0 0 1 0])
  ("read-count" .
   [3 0 0 0 0 0 0 0 0 0])
  ("RingBuffer" .
   [0 0 0 0 0 0 1 0 0 1])
  ("deftype" .
   [1 0 0 0 0 0 0])
  ("type" .
   [1 0 0 0])
  ("with-meta" .
   [3 0 0 0 0 0 0 0 0])
  ("*a*" .
   [3 0 0])
  ("class" .
   [6 0 1 0 1])
  ("chicken-name" .
   [2 0 0 0 0 0 0 0 0 0 0 0])
  ("set-name" .
   [1 0 0 0 0 0 0 0])
  ("get-name" .
   [2 0 0 0 0 0 0 0])
  ("new-name" .
   [3 0 0 0 0 0 0 0])
  ("this" .
   [4 0 0 0])
  ("ChangeName" .
   [0 0 0 0 1 0 1 0 0 0])
  ("name" .
   [2 0 0 0])
  ("size" .
   [2 0 0 0])
  ("dfsf" .
   [1 0 0 0])
  ("Chicken" .
   [3 0 0 0 0 0 0])
  ("load" .
   [2 0 0 0])
  ("take" .
   [5 0 0 0])
  ("rose" .
   [1 0 0 0])
  ("nil" .
   [1 0 0])
  (":ring-buffer" .
   [1 0 0 0 0 0 3 1 1 0 0 0])
  ("r-buffer" .
   [1 0 0 0 0 0 0 0])
  (":consumer-1" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("producer" .
   [3 0 0 0 0 0 0 3])
  ("producer-" .
   [2 0 0 0 0 0 0 0 1])
  ("producer-1" .
   [5 0 0 0 0 0 0 0 0 0])
  ("consumer-1" .
   [13 0 0 0 0 0 0 0 0 0])
  (":producer-1" .
   [0 0 0 0 0 0 0 1 0 0 0])
  (":producer-2" .
   [1 0 0 0 0 0 0 0 0 1 0])
  ("producer-2" .
   [5 0 0 0 0 0 0 0 0 0])
  ("consumer-2" .
   [6 0 0 0 0 0 0 0 0 0])
  ("don" .
   [1 0 0])
  ("Consumer" .
   [0 0 0 0 0 0 0 1])
  ("pr" .
   [1 0])
  (":consumer-2" .
   [1 0 0 0 0 0 0 0 0 0 0])
  ("clojure.contrib." .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("clojure.contrib.classpath/getClasspath" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0])
  ("clojure.contrib.classpath/classpath" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0])
  ("all" .
   [1 0 0])
  (".close" .
   [1 0 0 0 0 0])
  ("do-update" .
   [0 0 0 0 0 1 0 0 0])
  ("sql-now->timestamp" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("sql-now->date" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0])
  ("yes-no->bool" .
   [0 0 0 0 0 0 1 0 0 0 0 0])
  ("3434" .
   [1 0 0 0])
  ("10" .
   [2 0])
  ("22" .
   [1 0])
  ("random-lazy" .
   [0 0 0 0 0 0 0 0 0 0 1])
  ("random-lazy-2" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0])
  ("1000" .
   [1 0 0 0])
  ("_" .
   [6])
  ("throw" .
   [2 0 0 0 0])
  ("clojure.set" .
   [1 0 0 0 0 0 0 0 0 0 0])
  (":eyes" .
   [1 0 0 0 0])
  ("*out*" .
   [1 0 0 0 3])
  ("java.io.PrintWriter" .
   [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0])
  ("stack-trac" .
   [0 0 0 0 0 0 1 0 0 0])
  ("with-out-str" .
   [0 0 0 0 0 0 0 0 0 0 0 1])
  ("transient" .
   [0 0 0 0 1 2 2 0 0])
  ("transitions" .
   [3 0 0 0 0 0 0 2 1 0 0])
  ("quaver-1" .
   [1 0 0 0 0 0 0 0])
  ("rest" .
   [1 0 0 0])
  ("kick" .
   [4 0 1 0])
  ("quaver" .
   [1 0 0 0 0 0])
  ("when" .
   [1 0 0 0])
  ("cycle" .
   [1 0 0 0 0])
  ("keys" .
   [3 0 0 0])
  ("length" .
   [5 0 0 0 0 0])
  ("loop" .
   [2 0 0 0])
  ("start-state" .
   [6 0 0 0 0 0 1 0 0 0 0])
  ("get" .
   [2 0 0])
  ("start" .
   [2 0 0 0 0])
  ("state" .
   [3 0 0 0 0])
  ("next-state" .
   [2 0 0 0 0 1 0 1 0 1])
  ("navigate-graph" .
   [0 0 0 1 0 2 0 0 0 0 0 0 0 0])
  ("history" .
   [2 0 0 0 0 0 0])
  ("contains?" .
   [3 0 0 0 0 0 0 0 0])
  ("c-hat" .
   [0 0 0 1 0])
  ("kick-note" .
   [1 0 0 0 0 0 0 0 0])
  ("stop" .
   [1 0 0 0])
  ("clojure.math.combinatorics" .
   [0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0])
  ("clojure.math.combinatorics/permutations" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("clojure.math.combinatorics/combinations" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 3 0 0 0 0 0 0 0 0])
  ("mapcat" .
   [1 0 0 0 0 0])
  ("clojure.math.combinatorics/cartesian-product" .
   [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("identity" .
   [0 0 0 0 1 0 0 0])
  ("next-step" .
   [1 0 0 0 0 0 0 0 3])
  ("all-rules" .
   [3 0 0 0 0 0 0 0 0])
  ("update-in" .
   [2 0 0 0 0 0 0 0 0])
  ("%s" .
   [1 0])
  ("assoc-in" .
   [1 0 0 0 0 0 0 0])
  ("chickens" .
   [2 0 0 0 0 0 0 0])
  ("doto" .
   [0 0 0 1])
  ("dotimes" .
   [1 0 0 0 0 0 0])
  ("rules" .
   [2 0 0 0 0])
  ("01" .
   [1 0])))
